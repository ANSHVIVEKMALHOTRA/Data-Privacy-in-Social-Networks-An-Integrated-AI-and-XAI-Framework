import shap
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
from sklearn.preprocessing import OneHotEncoder

# Generate synthetic data
np.random.seed(42)
n_samples = 10000

data = {
    'user_id': range(n_samples),
    'age': np.random.randint(18, 65, n_samples),
    'gender': np.random.choice(['M', 'F'], n_samples),
    'posts_count': np.random.randint(0, 1000, n_samples),
    'friends_count': np.random.randint(0, 5000, n_samples),
    'privacy_level': np.random.choice(['low', 'medium', 'high'], n_samples),
    'engagement_score': np.random.uniform(0, 1, n_samples)
}

df = pd.DataFrame(data)

# Split the data into training and testing sets
X = df.drop(['privacy_level', 'user_id'], axis=1)
y = df['privacy_level']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Check if 'gender' column exists before proceeding with encoding
if 'gender' in X_train.columns:
    # Create a OneHotEncoder object
    encoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore') # sparse=False for compatibility with RandomForestClassifier

    encoded_X_train = encoder.fit_transform(X_train[['gender']])
    encoded_X_test = encoder.transform(X_test[['gender']])

    # Get feature names from the encoder
    feature_names = encoder.get_feature_names_out(['gender'])

    # Create DataFrames from the encoded data
    encoded_X_train_df = pd.DataFrame(encoded_X_train, columns=feature_names, index=X_train.index)
    encoded_X_test_df = pd.DataFrame(encoded_X_test, columns=feature_names, index=X_test.index)

    # Drop the original 'gender' column and concatenate the encoded columns
    X_train = X_train.drop('gender', axis=1).join(encoded_X_train_df)
    X_test = X_test.drop('gender', axis=1).join(encoded_X_test_df)

# Initialize and train the model
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Make predictions
y_pred = rf_model.predict(X_test)

# Evaluate the model
print(classification_report(y_test, y_pred))


# Create a SHAP explainer
explainer = shap.TreeExplainer(rf_model)

# Calculate SHAP values for the test
